	li  R2, 0x0
	li  R0, 0x1
	li  R1, 0x10000
	stw R0, 0(R1)
	add R2, R0, R2
	beq R0, R2, here
	add R7, R0, R0
	nop

here:
	ldw R3, 0(R1)
	bne R0, R3, here
	add R8, R0, R0
	nop
	nop
	nop
	nop
	nop
	nop

0001 1110 0010 0000 0000 0000 0000 0000		1e200000
0001 1110 0000 0000 0000 0000 0000 0001		1e000001
0001 1110 0001 0001 0000 0000 0000 0000		1e110000
0010 0110 0000 0000 1000 0000 0000 0000		26008000
0000 0000 0010 0000 0000 1000 0000 0000		00200800
0110 0000 0000 0000 0000 1000 0000 0010		60000802
0000 0000 0111 0000 0000 0000 0000 0000		00700000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
0010 0010 0011 0000 1000 0000 0000 0000		22308000
0110 0101 1111 0000 0000 1111 1111 1111		65f00fff
0000 0000 1000 0000 0000 0000 0000 0000		00800000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000
1111 1110 0000 0000 0000 0000 0000 0000		fe000000

R-type
formato add:
op	     rd	  	rs1	   rs2	  resto
0000000  00011  00001  00010  0000000000	ADD R3, R1, R2

M-type
formato ldw:
op	     rd	   	rs1	   offset
0010001  00001  00000  000000000000000		LDW R1, 0(R0)

formato stw:
op		 rd		rs1
0010011  00011  00000  000000000001000		STW  R3, 8(R0)

B-type
formato beq:
op	     offsetHi  rs1	  rs2	 offsetLo
0110000  11111     00000  00000  1111111100		BEQ R0,R0, 0   dir 0x10; queremos saltar a la posicion 0, y el procesador calcula la direccion haciendo PC + 4*Ext(inm) por eso ponemos fffC: 4*fffC+0010=0000

I-type
formato li:
op       rd       offset
0001111  00001    00000000000000010000      LI R1, 16
